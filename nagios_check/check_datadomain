#!/usr/bin/env perl
#
=pod

=head1 NAME

check_datadomain - Checks Datadomain states via snmp

=head1 DESCRIPTION

This plugins monitors some states of your datadomain via snmp. It can monitor for example the state of the PSUs, NVRAM, disks and so on.

=head1 VERSION

Version 0.3

=head1 SYNOPSIS

check_datadomain -H <hostname> [-C <COMMUNITY>] [-p <port>] [-P <snmp-version>] -m <method> ( FSSPACE [-w <warning % USED>] [-c <critical % USED>] | IFSTATE -i <interface id>)

=head1 OPTIONS

=over 4

=item -H <hostname> (required)

Define the hostname

=item -C <community> (optional)

Optional community string for SNMP communication (default: public)

=item -p, --port <portnumber>

Port number (default: 161)

=item -P, --protocol <protocol>

SNMP protocol version [1,2c] (default: 2c)

=item -t, --timeout <seconds>

Script timeout in seconds (default: 15)

=item -m, --method <checkmethod>

check method one of PSU, NVRAM, ALERTS, FAN, DISKSTATE, FSSPACE, IFSTATE, REPLICATION

=over 1

=item PSU: State of all Powersupplies

=item NVRAM: NVRAM battery state

=item ALERTS: Active alerts on the system

=item FAN: Fan state of all enclosures

=item DISKSTATE: disk states

=item FSSPACE: used filesystem space. -w for waring % -c for critical %

=over 2

=item Defaults: -w 75 -c 90

=back

=item IFSTATE: Checks if the given interfaces are up. e.g.:-i 2,3

=over 2

=item do a snmpwalk on IF-MIB to get the interface ids

=back

=item REPLICATION: state of all replication pairs

=back

=item -i, --iface <if ids>

comma seperated list of interface ids that should be up (use snmpwalk to get them)

=item -w, --warning <number>

warning filesystem space usage in %

=item -c, --critical <number>

critical filesystem space usage in %

=item -h, --help

Print detailed help screen. You also can use perldoc check_datadomain

=item -V, --version

Print version information

=back

=head1 AUTHOR

Jan Ulferts <jan.ulferts@xing.com>

=head1 KNOWN ISSUES

currently not

=head1 BUGS

of course not

=head1 REQUIRES

=over 1

=item Perl 5

=item Getopt::Long

=item Net::SNMP

=back

=head1 LICENSE

The MIT License (MIT)

Copyright (c) 2013 Jan Ulferts

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=head1 HISTORY

=over 1

=item 23.01.2013: Version 0.1

=item 20.11.2013: Version 0.1r1 Added some documentation for publishing

=item 04.06.2015: Version 0.2 Fixed wrong interface state handling. Thx. @Thomas

=item 18.01.2017: Version 0.3 Add Alerts as a check, Fix NVRAM check and add perfdata to FSSPACE.

=back

=cut

use strict;
use warnings;
use Getopt::Long;
use vars qw($PROGNAME);
use Net::SNMP;

sub print_help ();
sub print_usage ();

#prevent from using utils.pm
my $TIMEOUT = 15;
my %ERRORS=('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);

my ($opt_V, $opt_h, $opt_C, $opt_H, $opt_p, $opt_w, $opt_c, $opt_t, $opt_P,$opt_m, $opt_i);
my ($result, $message, $age, $size, $st, $oids, @oid, @warning, @critical ,$key, $value);

$PROGNAME="check_snmp_datadomain";

$opt_C="public";
$opt_H="";
$opt_p=161;
$opt_t="15";
$opt_P="2c";

Getopt::Long::Configure('bundling');
GetOptions(
        "V"   => \$opt_V, "version"         => \$opt_V,
        "h"   => \$opt_h, "help"            => \$opt_h,
        "C=s" => \$opt_C, "community"       => \$opt_C,
        "H=s" => \$opt_H, "hostname"        => \$opt_H,
        "p=i" => \$opt_p, "port=i"          => \$opt_p,
        "w=s" => \$opt_w, "warning=s"       => \$opt_w,
        "c=s" => \$opt_c, "critical=s"      => \$opt_c,
        "m=s" => \$opt_m, "method=s"        => \$opt_m,
        "i=s" => \$opt_i, "iface=s"         => \$opt_i,
        "t=i" => \$opt_t, "timeout=i"       => \$opt_t,
        "P=s" => \$opt_P, "protocol=s"      => \$opt_P);

#OIDs
$oids = {
    sysname     => ".1.3.6.1.2.1.1.5.0",
    ddversion   => ".1.3.6.1.4.1.19746.1.13.1.3.0",
    enclosures  => ".1.3.6.1.4.1.19746.1.1.1.1.1.1.1",
    psu         => ".1.3.6.1.4.1.19746.1.1.1.1.1.1.4",
    nvram       => ".1.3.6.1.4.1.19746.1.2.3.1.1.3.1",
    fanstate    => ".1.3.6.1.4.1.19746.1.1.3.1.1.1.6",
    fanname     => ".1.3.6.1.4.1.19746.1.1.3.1.1.1.4",
    diskstate   => ".1.3.6.1.4.1.19746.1.6.3.1.1.14",
    diskserial  => ".1.3.6.1.4.1.19746.1.6.1.1.1.6",
    diskmodel   => ".1.3.6.1.4.1.19746.1.6.1.1.1.4",
    ifspeed     => ".1.3.6.1.2.1.31.1.1.1.15",
    ifname      => ".1.3.6.1.2.1.31.1.1.1.1",
    ifadstatus  => ".1.3.6.1.2.1.2.2.1.7",
    ifopstatus  => ".1.3.6.1.2.1.2.2.1.8",
    fsid        => ".1.3.6.1.4.1.19746.1.3.2.1.1.2",
    fsname      => ".1.3.6.1.4.1.19746.1.3.2.1.1.3",
    fssize      => ".1.3.6.1.4.1.19746.1.3.2.1.1.4",
    fsused      => ".1.3.6.1.4.1.19746.1.3.2.1.1.5",
    fsavail     => ".1.3.6.1.4.1.19746.1.3.2.1.1.6",
    fsperc      => ".1.3.6.1.4.1.19746.1.3.2.1.1.7",
    alerts      => ".1.3.6.1.4.1.19746.1.4.1.1",
    alertdesc   => ".1.3.6.1.4.1.19746.1.4.1.1.1.3",
    alertsev    => ".1.3.6.1.4.1.19746.1.4.1.1.1.4",
    alerttime   => ".1.3.6.1.4.1.19746.1.4.1.1.1.2",
    alertid     => ".1.3.6.1.4.1.19746.1.4.1.1.1.5",
    replctxt          => ".1.3.6.1.4.1.19746.1.8.1.1.1.1",
    replctxttrap      => ".1.3.6.1.4.1.19746.1.8.1.1.1.2",
    replstate         => ".1.3.6.1.4.1.19746.1.8.1.1.1.3",
    replstatus        => ".1.3.6.1.4.1.19746.1.8.1.1.1.4",
    replfsstatus      => ".1.3.6.1.4.1.19746.1.8.1.1.1.5",
    replconntime      => ".1.3.6.1.4.1.19746.1.8.1.1.1.6",
    replsource        => ".1.3.6.1.4.1.19746.1.8.1.1.1.7",
    repldest          => ".1.3.6.1.4.1.19746.1.8.1.1.1.8",
    replprecompsent   => ".1.3.6.1.4.1.19746.1.8.1.1.1.9",
    replpostcompsent  => ".1.3.6.1.4.1.19746.1.8.1.1.1.10",
    replprecompremain => ".1.3.6.1.4.1.19746.1.8.1.1.1.11",
    replpostcomprcv   => ".1.3.6.1.4.1.19746.1.8.1.1.1.12",
    replthrottle      => ".1.3.6.1.4.1.19746.1.8.1.1.1.13",
    replsyncedtime    => ".1.3.6.1.4.1.19746.1.8.1.1.1.14",
};

if ($opt_t) {
        $TIMEOUT=$opt_t;
}

# Just in case of problems, let's not hang Nagios
$SIG{'ALRM'} = sub {
        print "UNKNOWN - Plugin Timed out\n";
        exit $ERRORS{"UNKNOWN"};
};
alarm($TIMEOUT);

if ($opt_V) {
        exit $ERRORS{'OK'};
}

if ($opt_h) {
        print_help();
        exit $ERRORS{'OK'};
}

if (! $opt_H) {
        print "No Hostname specified\n\n";
        print_usage();
        exit $ERRORS{'UNKNOWN'};
}

if ($opt_m eq "REPLICATION" and $opt_P eq "1") {
    print "REPLICATION needs SNMP protocol version 2c\n";
    print_usage();
    exit $ERRORS{'UNKNOWN'};
}

sub print_usage () {
        print "Usage:\n";
        print "  $PROGNAME -H <hostname> [-C <COMMUNITY>] [-p <port>] [-P <snmp-version>] -m <method> ( FSSPACE [-w <warning % USED>] [-c <critical % USED>] | IFSTATE -i <interface id>) \n";
        print "  $PROGNAME [-h | --help]\n";
        print "  $PROGNAME [-V | --version]\n";
        print "\n\nOptions:\n";
        print "  -H, --hostname\n";
        print "     Host name or IP Address\n";
        print "  -C, --community\n";
        print "     Optional community string for SNMP communication\n";
        print "     (default is \"public\")\n";
        print "  -p, --port\n";
        print "     Port number (default: 161)\n";
        print "  -P, --protocol\n";
        print "     SNMP protocol version [1,2c]. Defaults: 2c\n";
        print "  -t, --timeout <seconds>\n";
        print "     SNMP timeout in seconds (default: 15)\n";
        print "  -m, --method\n";
        print "     check method one of PSU, NVRAM, ALERTS, FAN, DISKSTATE, FSSPACE, IFSTATE, REPLICATION\n";
        print "         PSU: State of all Powersupplies\n";
        print "         NVRAM: NVRAM battery state\n";
        print "         ALERTS: Active alerts on the system\n";
        print "         FAN: Fan state of all enclosures\n";
        print "         DISKSTATE: disk states\n";
        print "         FSSPACE: used filesystem space. -w for waring % -c for critical %\n";
        print "             Defaults: -w 75 -c 90\n";
        print "         IFSTATE: Checks if the given interfaces are up. e.g.:-i 2,3\n";
        print "             do a snmpwalk on IF-MIB to get the interface ids\n";
        print "         REPLICATION: state of all replication pairs (needs SNMP version >= 2c)\n";
        print "  -i, --iface\n";
        print "     comma seperated list of interface ids that should be up (use snmpwalk to get them)\n";
        print "  -w, --warning\n";
        print "     warning trigger value:\n";
        print "     - FSSPACE:     filesystem space usage in % (default: 75%)\n";
        print "     - REPLICATION: hours since last synced (default: 24 hours)\n";
        print "  -c, --critical\n";
        print "     critical trigger value:\n";
        print "     - FSSPACE:     filesystem space usage in % (default: 90%)\n";
        print "     - REPLICATION: hours since last synced (default: 48 hours)\n";
        print "  -h, --help\n";
        print "     Print detailed help screen\n";
        print "  -V, --version\n";
        print "     Print version information\n\n";

}

sub print_help () {
        print "Copyright (c) 2013 XING AG - Jan-Henning Ulferts <jan.ulferts\@xing.com>\n\n";
        print_usage();
        print "\n";
        print "  host  Give me some Host to work with\n";
        print "  <help>  This output\n";
        print "\n";
}

sub human_bytes {
    # http://www.perlmonks.org/?node_id=378538
    my( $size, $n ) =( shift, 0 );
    ++$n and $size /= 1024 until $size < 1024;
    return sprintf "%.2f %s",
          $size, ( qw[ bytes KiB MiB GiB TiB ] )[ $n ];
}

my $powerModuleStatus = {
    0 => "absent",
    1 => "ok",
    2 => "failed",
    3 => "faulty",
    4 => "acnone",
    99=> "unknown",
};

my $nvramBatteryStatus = {
    0 => 'ok',
    1 => 'disabled',
    2 => 'discharged',
    3 => 'softdisabled',
};

my $fanStatus = {
    0 => 'notfound',
    1 => 'ok',
    2 => 'fail',
};

my $diskState = {
    1 => 'ok',
    2 => 'unknown',
    3 => 'absent',
    4 => 'failed',
};

my $replState = {
    'pre-5.4' => {
        1 => 'enabled',
        2 => 'disabled',
        3 => 'disabledNeedsResync',
    },
    'post-5.4' => {
        1 => 'initializing',
        2 => 'normal',
        3 => 'recovering',
        4 => 'uninitialized',
    },
};

my $replStatus = {
    1 => 'connected',
    2 => 'disconnected',
    3 => 'migrating',
    4 => 'suspended',
    5 => 'neverConnected',
    6 => 'idle',
};

my $methodName = {
    "PSU"         => "PSU(s)",
    "NVRAM"       => "nvram batterie(s)",
    "ALERTS"      => "alert(s)",
    "FAN"         => "fan(s)",
    "DISKSTATE"   => "disk(s)",
    "FSSPACE"     => "filesystem(s)",
    "IFSTATE"     => "interface(s)",
    "REPLICATION" => "replication pair(s)",
};

my ($session, $error) = Net::SNMP->session(Hostname => $opt_H, Community => $opt_C, Version => $opt_P);
    print "Session Error: $error" && exit $ERRORS{'UNKNOWN'} unless ($session);

my $t = $session->get_table($oids->{enclosures});

my $r;
foreach (keys %{$t}) {
    my $v = $t->{$_};
    $r->{$v} = 1;
}
my @enclosures = keys %{$r};

my ( $output, $out, $perfdata );
if ($opt_m eq "PSU") {
    my $state = $ERRORS{'OK'};
    foreach my $enclosure (sort @enclosures) {
        my $res = $session->get_table($oids->{psu}.".".$enclosure);
        $output->{$enclosure}->{1} = $res->{$oids->{psu}.".".$enclosure."."."1"};
        $output->{$enclosure}->{2} = $res->{$oids->{psu}.".".$enclosure."."."2"};
        foreach my $ps (keys %{$output->{$enclosure}}) {
            my $val = $output->{$enclosure}->{$ps};
            if ( $val == 4 || $val == 0 ) {
                $state = $ERRORS{'WARNING'};
            } elsif ( $val == 2 || $val == 3 ) {
                $state = $ERRORS{'CRITICAL'};
            } elsif ( $val == 1 ){
                $state = $ERRORS{'OK'};
            } else {
                $state = $ERRORS{'UNKNOWN'};
            }
            push(@{$out->{$state}}, sprintf("%s - PS%i from Enclosure %i is in state %s", uc(state_reverse($state)), $ps, $enclosure, $powerModuleStatus->{$val}));
        }
    }
} elsif ($opt_m eq "NVRAM") {
    my $req = $oids->{'nvram'};
    my $result = $session->get_table($req);

    while(my($k,$v) = each %$result) {
        my $state;
        my $batteryId = $k;
        $batteryId =~ s/$oids->{'nvram'}.//;
        my $val = $v;
        if ( defined $val ) {
            if ( $val == 0 ) {
                $state = $ERRORS{'OK'};
            } elsif ( $val > 0 && $val < 3 ) {
                $state = $ERRORS{'CRITICAL'};
            } else {
                print "UNKNOWN - plugin in unknown state\n";
                exit $ERRORS{'UNKNOWN'};
            }
            push(@{$out->{$state}}, sprintf("%s - NVRAM battery %i is in '%s' state", uc(state_reverse($state)), $batteryId, $nvramBatteryStatus->{$val}))
        } else {
            $state = $ERRORS{'UNKNOWN'};
            push(@{$out->{$state}}, sprintf("%s - NVRAM battery %i state is not known", uc(state_reverse($state)), $batteryId))
        }
    }
} elsif ($opt_m eq "ALERTS") {
    my $state=$ERRORS{'UNKNOWN'};
    my $q = $oids->{'alerts'};
    $result = $session->get_table($q);
    my @alerts;

    while(my($k,$v) = each %$result) {
        my $inputkey = $k;
        my $vdesc = undef;
        if ($inputkey =~ m/$oids->{'alertdesc'}/) {
           $inputkey =~ s/$oids->{'alertdesc'}.//;
           $vdesc = "desc";
        } elsif ($inputkey =~ m/$oids->{'alertsev'}/) {
           $inputkey =~ s/$oids->{'alertsev'}.//;
           $vdesc = "severity";
        } elsif ($inputkey =~ m/$oids->{'alerttime'}/) {
           $inputkey =~ s/$oids->{'alerttime'}.//;
           $vdesc = "time";
        } elsif ($inputkey =~ m/$oids->{'alertid'}/) {
           $inputkey =~ s/$oids->{'alertid'}.//;
           $vdesc = "id";
        }
        if (defined $vdesc) {
            $alerts[$inputkey]{$vdesc} = $v;
        }
    }

    # Remove undefined elements
    @alerts = grep defined, @alerts;

    foreach my $alert (@alerts){
       if (not exists $alert->{'id'}) {
          $alert->{'id'} = 'UNKNOWN ID';
       }
       if (not exists $alert->{'severity'}) {
          $alert->{'severity'} = 'UNKNOWN';
       }
       if ($alert->{'severity'} =~ "CRITICAL") {
          $state = $ERRORS{'CRITICAL'};
       } elsif ($alert->{'severity'} =~ "WARNING") {
          $state = $ERRORS{'WARNING'};
       } else {
          $state = $ERRORS{'UNKNOWN'};
       }
       push(@{$out->{$state}},sprintf("%s - Alert %s from %s: %s",uc(state_reverse($state)),$alert->{'id'},$alert->{'time'},$alert->{'desc'}));
    }
    if (scalar @alerts == 0) {
        printf "OK - No alerts\n";
        exit(0);
    }
} elsif ($opt_m eq "FAN") {
    my $state=$ERRORS{'OK'};
    $result = {'state' => $session->get_table($oids->{'fanstate'}), 'name' => $session->get_table($oids->{'fanname'}),};
    my $r;
    foreach my $enclosure (sort @enclosures) {
        my $reg = $oids->{'fanstate'}."\.".$enclosure."\.[0-9]+";
        my @enres = grep { $_ =~ m/$reg/} keys %{$result->{state}};
        foreach (sort @enres) {
            $_ =~m/^.*\.([0-9]+)$/;
            my $myid = $enclosure.".".$1;
            my $fanstate = $result->{state}->{$oids->{'fanstate'}.".".$myid};

            if ($fanstate == 1) {
                $state = $ERRORS{'OK'};
            } elsif ($fanstate == 0 or $fanstate == 2) {
                $state = $ERRORS{'CRITICAL'};
            } else {
                print "UNKNOWN - plugin in unknown state\n";
                exit $ERRORS{'UNKNOWN'};
            }
            push(@{$out->{$state}},sprintf("%s - Enclosure %i, Fan %s: %s",uc(state_reverse($state)),$enclosure,$result->{name}->{$oids->{'fanname'}.".".$myid},$fanStatus->{$fanstate}));
        }
    }
} elsif ($opt_m eq "DISKSTATE") {
    my $state=$ERRORS{'OK'};
    $result = {'state' => $session->get_table($oids->{'diskstate'}), 'serial' => $session->get_table($oids->{'diskserial'}), 'model' => $session->get_table($oids->{'diskmodel'})};
    my $r;
    foreach my $enclosure (sort @enclosures) {
        my $reg = $oids->{'diskstate'}."\.".$enclosure."\.[0-9]+";
        my @enres = grep { $_ =~ m/$reg/} keys %{$result->{'state'}};
        foreach (sort @enres) {
            $_ =~m/^.*\.([0-9]+)$/;
            my $myid = $enclosure.".".$1;
            my $diskstate = $result->{state}->{$oids->{'diskstate'}.".".$myid};

            if ($diskstate == 1) {
                $state = $ERRORS{'OK'};
            } elsif ($diskstate == 3 or $diskstate == 4) {
                $state = $ERRORS{'CRITICAL'};
            } elsif ($diskstate == 2) {
                $state = $ERRORS{'UNKNOWN'};
            } else {
                print "UNKNOWN - plugin in unknown state\n";
                exit $ERRORS{'UNKNOWN'};
            }
            push(@{$out->{$state}},sprintf("%s - Enclosure %i, Disk %s, S/N %s: %s",uc(state_reverse($state)),$enclosure,$result->{'model'}->{$oids->{'diskmodel'}.".".$myid},$result->{'serial'}->{$oids->{'diskserial'}.".".$myid},$diskState->{$diskstate}));
        }
    }
} elsif ($opt_m eq "IFSTATE") {
    unless ($opt_i && $opt_i=~m/^[0-9]+(,[0-9]+)*$/) {
        print "UNKNOWN - please enter a numeric interface id or list.\n";
        exit $ERRORS{'UNKNOWN'};
    } else {
        my @interfaces = split(',',$opt_i);
        my ($state);
        foreach (@interfaces) {
            if ($result = $session->get_request(($oids->{'ifname'}.".".$_,$oids->{'ifadstatus'}.".".$_,$oids->{'ifopstatus'}.".".$_,$oids->{'ifspeed'}.".".$_))) {
                $state = (($result->{$oids->{'ifadstatus'}.".".$_}) == ($result->{$oids->{'ifopstatus'}.".".$_})) ? $ERRORS{'OK'} : $ERRORS{'CRITICAL'};
                if ($result->{$oids->{'ifspeed'}.".".$_} < 1000) {
                    push(@{$out->{$state}}, sprintf("%s - Interface %s is at speed %iMb/s", uc(state_reverse($state)), $result->{$oids->{'ifname'}.".".$_}, $result->{$oids->{'ifspeed'}.".".$_}));
                } else {
                    push(@{$out->{$state}}, sprintf("%s - Interface %s is at speed %iGb/s", uc(state_reverse($state)), $result->{$oids->{'ifname'}.".".$_}, $result->{$oids->{'ifspeed'}.".".$_}/1000));
                }
            } else {
                print "UNKNOWN - plugin in unknown state check the interface id\n";
                exit $ERRORS{'UNKNOWN'};
            }
        }
    }
} elsif ($opt_m eq "REPLICATION") {
    my $warn = $opt_w || "24";
    my $crit = $opt_c || "48";
    my $state;
    my $reason;
    my $req = $oids->{'replctxt'};
    my $result = $session->get_table($req);

    my $ddver = $session->get_request($oids->{ddversion});
    my $sysname = $session->get_request($oids->{sysname})->{$oids->{sysname}};
    my $replStateTable;
    # Version 5.1 doesn't have a systemVersion value. Assuming older as well.
    # Version 5.2 have the systemVersion value but still the old replicationState behavior
    # Version 5.3 doesn't seem to exists, assuming the same as 5.2
    # Version 5.4 introduces the new behavior
    if ( $ddver->{$oids->{ddversion}} eq 'noSuchObject' ||
         $ddver->{$oids->{ddversion}} =~ m'^5\.2\.' ||
         $ddver->{$oids->{ddversion}} =~ m'^5\.3\.' ) {
        $replStateTable = 'pre-5.4';
    } else {
        $replStateTable = 'post-5.4';
    }

    my @repl = values %$result;
    my @o = map { ( $oids->{replstate}.".".$_,
                    $oids->{replstatus}.".".$_,
                    $oids->{replconntime}.".".$_,
                    $oids->{replsource}.".".$_,
                    $oids->{repldest}.".".$_,
                    $oids->{replsyncedtime}.".".$_,
                    $oids->{replprecompsent}.".".$_,
                    $oids->{replpostcompsent}.".".$_,
                    $oids->{replpostcomprcv}.".".$_,
                    $oids->{replprecompremain}.".".$_,
                    ) } @repl;
    $result = $session->get_request(@o);

    my $syncedhours;
    my $perfname;
    foreach (@repl) {
        $reason = "";
        if ($result->{$oids->{replstatus}.".".$_} == "1" ||
            $result->{$oids->{replstatus}.".".$_} == "6") {
            if ($replState->{$replStateTable}->{$result->{$oids->{replstate}.".".$_}} eq "enabled" ||
                $replState->{$replStateTable}->{$result->{$oids->{replstate}.".".$_}} eq "normal" ) {
                $state = $ERRORS{'OK'};
            } else {
                $state = $ERRORS{'CRITICAL'};
                $reason = "replication pair is not enabled or in a 'normal' state, ";
            }
        } elsif ($result->{$oids->{replstatus}.".".$_} == "3" ||
                 $result->{$oids->{replstatus}.".".$_} == "4") {
            $state = $ERRORS{'WARNING'};
            $reason = "status is '".$replStatus->{$result->{$oids->{replstatus}.".".$_}}."', ";
        } else {
            $state = $ERRORS{'CRITICAL'};
            $reason = "status is '".$replStatus->{$result->{$oids->{replstatus}.".".$_}}."', ";
        }
        $syncedhours = sprintf("%.2f", (time() - $result->{$oids->{replsyncedtime}.".".$_}) / 3600);
        if ($syncedhours > $crit) {
            $state = $ERRORS{'CRITICAL'};
            $reason = "not synced since $syncedhours hours, ";
        } elsif ($syncedhours > $warn) {
            $state = $ERRORS{'WARNING'};
            $reason = "not synced since $syncedhours hours, ";
        }
        if (index($result->{$oids->{replsource}.".".$_}, $sysname) >= 0) {
            $perfname = $result->{$oids->{replsource}.".".$_};
        } elsif (index($result->{$oids->{repldest}.".".$_}, $sysname) >= 0) {
            $perfname = $result->{$oids->{repldest}.".".$_};
        }
        push(@{$out->{$state}}, sprintf("%s - Replication: %s -> %s: %sstate: %s, status: %s, connected since: %s, last synced: %s, remaining: %s",
                                        uc(state_reverse($state)),
                                        $result->{$oids->{replsource}.".".$_},
                                        $result->{$oids->{repldest}.".".$_},
                                        $reason,
                                        $replState->{$replStateTable}->{$result->{$oids->{replstate}.".".$_}},
                                        $replStatus->{$result->{$oids->{replstatus}.".".$_}},
                                        scalar(localtime($result->{$oids->{replconntime}.".".$_})),
                                        scalar(localtime($result->{$oids->{replsyncedtime}.".".$_})),
                                        human_bytes($result->{$oids->{replprecompremain}.".".$_}),
                                        ));
        push(@{$perfdata}, sprintf(" '%s_precompsent'=%sc;;;; '%s_postcompsent'=%sc;;;; '%s_postcomprcv'=%sc;;;; '%s_precompremain'=%sB;;;;  '%s_lastsynced'=%ss;%d;%d;; ",
                                   $perfname,
                                   $result->{$oids->{replprecompsent}.".".$_},
                                   $perfname,
                                   $result->{$oids->{replpostcompsent}.".".$_},
                                   $perfname,
                                   $result->{$oids->{replpostcomprcv}.".".$_},
                                   $perfname,
                                   $result->{$oids->{replprecompremain}.".".$_},
                                   $perfname,
                                   time() - $result->{$oids->{replsyncedtime}.".".$_},
                                   $warn * 3600,
                                   $crit * 3600
                                  ));
    }
} elsif ($opt_m eq "FSSPACE") {
    my $crit = $opt_c || "90";
    my $warn = $opt_w || "75";
    my $state;
    my $req = $oids->{'fsid'};
    my $result = $session->get_table($req);

    my @fsid = values %$result;
    my @o = map { ( $oids->{fsname}.".".$_, $oids->{fssize}.".".$_, $oids->{fsused}.".".$_, $oids->{fsavail}.".".$_, $oids->{fsperc}.".".$_) } @fsid;
    $result = $session->get_request(@o);

    foreach (@fsid) {
        if ($result->{$oids->{fsperc}.".".$_} >= $crit) {
            $state = $ERRORS{'CRITICAL'};
        } elsif ($result->{$oids->{fsperc}.".".$_} >= $warn) {
            $state = $ERRORS{'WARNING'};
        } elsif ($result->{$oids->{fsperc}.".".$_} >= 0) {
            $state = $ERRORS{'OK'};
        } else {
            print "UNKNOWN - plugin in unknown state: filesystem used in perc <0\n";
            exit $ERRORS{'UNKNOWN'};
        }
        push(@{$out->{$state}}, sprintf("%s - Filesystem %s filled %i%% %4.2fG available", uc(state_reverse($state)), $result->{$oids->{fsname}.".".$_}, $result->{$oids->{fsperc}.".".$_},$result->{$oids->{fsavail}.".".$_}));
        push(@{$perfdata}, sprintf(" '%s_perc'=%s%%;%s;%s;0;100 '%s_avail'=%s;;;;", $result->{$oids->{fsname}.".".$_}, $result->{$oids->{fsperc}.".".$_}, $warn, $crit, $result->{$oids->{fsname}.".".$_}, $result->{$oids->{fsavail}.".".$_}));
    }
} else {
    print "please enter a valid method\n";
    print_usage();
    exit $ERRORS{'UNKNOWN'};
}

if (defined $out->{$ERRORS{'CRITICAL'}} && scalar @{$out->{$ERRORS{'CRITICAL'}}} > 0) {
    printf "CRITICAL - %i $methodName->{$opt_m} in critical state\n", scalar @{$out->{$ERRORS{'CRITICAL'}}};
    print join("\n",@{$out->{$ERRORS{'CRITICAL'}}})."\n";
    print join("\n",@{$out->{$ERRORS{'WARNING'}}})."\n" if $out->{$ERRORS{'WARNING'}};
    print join("\n",@{$out->{$ERRORS{'UNKNOWN'}}})."\n" if $out->{$ERRORS{'UNKNOWN'}};
    print join("\n",@{$out->{$ERRORS{'OK'}}})."\n" if $out->{$ERRORS{'OK'}};
    if (defined $perfdata) {
        print " | ";
        print join("", @{$perfdata});
        print "\n";
    }
    exit $ERRORS{'CRITICAL'};
} elsif (defined $out->{$ERRORS{'WARNING'}} && scalar @{$out->{$ERRORS{'WARNING'}}} > 0) {
    printf "WARNING - %i $methodName->{$opt_m} in warning state\n", scalar @{$out->{$ERRORS{'WARNING'}}};
    print join("\n",@{$out->{$ERRORS{'WARNING'}}})."\n";
    print join("\n",@{$out->{$ERRORS{'UNKNOWN'}}})."\n" if $out->{$ERRORS{'UNKNOWN'}};
    print join("\n",@{$out->{$ERRORS{'OK'}}})."\n" if $out->{$ERRORS{'OK'}};
    if (defined $perfdata) {
        print " | ";
        print join("", @{$perfdata});
        print "\n";
    }
    exit $ERRORS{'WARNING'};
} elsif ($out->{$ERRORS{'UNKNOWN'}}) {
    printf("UNKNOWN - %i $methodName->{$opt_m} in unkown state\n", scalar @{$out->{$ERRORS{'UNKNOWN'}}});
    print join("\n",@{$out->{$ERRORS{'UNKNOWN'}}})."\n";
    print join("\n",@{$out->{$ERRORS{'OK'}}})."\n" if $out->{$ERRORS{'OK'}};
    if (defined $perfdata) {
        print " | ";
        print join("", @{$perfdata});
        print "\n";
    }
    exit $ERRORS{'UNKNOWN'};
} else {
    printf "OK - %i $methodName->{$opt_m} ok\n", scalar @{$out->{$ERRORS{'OK'}}};
    print join("\n",@{$out->{$ERRORS{'OK'}}})."\n";
    if (defined $perfdata) {
        print " | ";
        print join("", @{$perfdata});
        print "\n";
    }
    exit $ERRORS{'OK'};
}

sub state_reverse {
    my $state = shift;
    my @s = qw/ok warning critical unknown/;
    return $s[$state];
}
